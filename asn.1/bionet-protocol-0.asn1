
-- Copyright (c) 2008-2009, Regents of the University of Colorado.
-- This work was supported by NASA contracts NNJ05HE10G, NNC06CB40C, and
-- NNC07CB47C.


BionetProtocol0
DEFINITIONS AUTOMATIC TAGS
::=
BEGIN

    -- 
    -- these are the fundamental data types of Bionet
    -- 

    ResourceFlavor ::= ENUMERATED {
        sensor(0),
        actuator,
        parameter
    }

    ResourceDataType ::= ENUMERATED {
        binary(0),
        uint8,
        int8,
        uint16,
        int16,
        uint32,
        int32,
        float,
        double,
        string
    }

    Value ::= CHOICE {
        binary-v   BOOLEAN,
        uint8-v    INTEGER (0..255),
        int8-v     INTEGER (-128..127),
        uint16-v   INTEGER (0..65535),
        int16-v    INTEGER (-32768..32767),
        uint32-v   INTEGER (0..4294967295),
        int32-v    INTEGER (-2147483648..2147483647),
        real       REAL,   -- this is used for both datatype "float" and "double"
        string     PrintableString
    }

    Datapoint ::= SEQUENCE {
        value       Value,
        timestamp   GeneralizedTime
    }

    Resource ::= SEQUENCE {
        id           PrintableString,
        flavor       ResourceFlavor,
        datatype     ResourceDataType,
        datapoints   SEQUENCE OF Datapoint
    }

    StreamDirection ::= ENUMERATED {
        producer(0),
        consumer
    }

    Stream ::= SEQUENCE {
        id         PrintableString,
        type       PrintableString,
        direction  StreamDirection
    }

    Node ::= SEQUENCE {
        id          PrintableString,
        resources   SEQUENCE OF Resource,
        streams     SEQUENCE OF Stream
    }

    HardwareAbstractor ::= SEQUENCE {
        type     PrintableString,
        id       PrintableString,
        nodes    SEQUENCE OF Node
    }


    -- 
    -- Helper structs
    -- 

    ResourceMetadata ::= SEQUENCE {
        nodeId       PrintableString,
        resourceId   PrintableString,
        flavor       ResourceFlavor,
        datatype     ResourceDataType
    }

    ResourceDatapoints ::= SEQUENCE {
        nodeId          PrintableString,
        resourceId      PrintableString,
        newDatapoints   SEQUENCE OF Datapoint
    }


    -- 
    -- ResourceDatapointsQuery: request from a client to the bdm server to
    --     list Resource Datapoints within a time window
    --
    -- ResourceDatapointsReply: reply from the bdm server to a client
    --     providing all available, matching information
    -- 

    ResourceDatapointsQuery ::= SEQUENCE {
        habType     PrintableString,
        habId       PrintableString,
        nodeId      PrintableString,
        resourceId  PrintableString,
        startTime   GeneralizedTime,
        endTime     GeneralizedTime
    }

    ResourceDatapointsReply ::= SEQUENCE OF HardwareAbstractor


    -- 
    -- SetResourceValue sets the value of a Resource, duh
    -- 
    -- Note: the value is a string, not a Value, because the sender of the
    --     message might not know the ResourceDataType
    --

    SetResourceValue ::= SEQUENCE {
        nodeId      PrintableString,
        resourceId  PrintableString,
        value       PrintableString
    }


    -- 
    -- StreamData contains some stream data
    -- 

    StreamData ::= SEQUENCE {
        nodeId    PrintableString,
        streamId  PrintableString,
        data      OCTET STRING
    }


    -- 
    -- C2H-Message is a Client-to-Hab message
    -- 

    C2H-Message ::= CHOICE {
        subscribeNode         PrintableString,
        subscribeDatapoints   PrintableString,
        setResourceValue      SetResourceValue,
        streamData            StreamData
    }


    -- 
    -- H2C-Message is a Hab-to-Client message
    -- 

    H2C-Message ::= CHOICE {
        newNode            Node,
        lostNode           PrintableString,
        resourceMetadata   ResourceMetadata,
        datapointsUpdate   ResourceDatapoints,
        streamData         StreamData
    }


    --
    -- BDM Client-to-Server messages
    --

    BDM-C2S-Message ::= CHOICE {
        resourceDatapointsQuery ResourceDatapointsQuery
    }


    --
    -- BDM Server-to-Client messages
    --

    BDM-S2C-Message ::= CHOICE {
        resourceDatapointsReply ResourceDatapointsReply
    }

END

