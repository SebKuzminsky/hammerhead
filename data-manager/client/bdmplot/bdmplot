#!/usr/bin/python

from sys import exit

from twisted.internet import reactor, interfaces, protocol
from twisted.protocols import basic
from twisted.web import server, resource
from twisted.web.static import File
from twisted.web.server import Site
from twisted.web.resource import Resource as TwistedResource

import time

from twisted_bdm_client import *
from bdm_client import *
from bdmplot_callback_cacher import *
import bdmplot_daemon
import bdmplot_lib

import optparse

from prune_datapoints import *

options = None
res_filter = None
bionet_resname = None

def process_new_session_or_subscription(res, timespan, regex):
    global res_filter
    global bionet_resname

    if (res == None) or (timespan == None):
        return

    #create the session
    subscriptions.append( { 'filter' : res_filter,
                            'timespan' : timespan,
                            'last requested' : time.time(),
                            'last rendered' : time.time() - time.time(),
                            'regexp' : regex,
                            'resource name' : bionet_resname,
                            'new' : 0 } )

    # Convert the timespan into timevals and timestamps
    timespan_vals = timespan_to_timevals(timespan[0])
    
    #subscribe to the resource name pattern requested in the HTTP request
    bdm_subscribe_datapoints_by_name(res_filter, timespan_vals[0], timespan_vals[1])


class Datapoints(resource.Resource):
    isLeaf = True

    def render_GET(self, request):
        global options
        global res_filter
        global bionet_resname

        found = 0

        for res in request.args['resource']:
            if (res.count("/")):
                (bdm_ids, bionet_resname) = res.split("/");
                (peer_id, bdm_id) = bdm_ids.split(",")
            else:
                peer_id = "*"
                bdm_id = options.bdm_id
                bionet_resname = res

            res_filter =  peer_id + "," + bdm_id + "/" + bionet_resname

            # existing session
            looking = found
            for sub in subscriptions:
                if (sub['filter'] == res_filter) and (sub['timespan'] == request.args['timespan']):
                    if (time.time() - sub['last rendered'] >= 120):
                        sub['new'] += 1
                    sub['last requested'] = time.time()
                    found += 1
                    break

            if (looking == found): # new subscription!
                regex = None
                if "regexp" in request.args:
                    regex = request.args['regexp'][0]

                retval = process_new_session_or_subscription(res, request.args['timespan'], regex)
                for sub in subscriptions:
                    if (sub['filter'] == res_filter) and (sub['timespan'] == request.args['timespan']):
                        if (time.time() - sub['last rendered'] >= 120):
                            sub['new'] += 1
                    sub['last requested'] = time.time()
                    found += 1
        
        (fname, format) = bdmplot_lib.bdmplot(request.args, bionet_resources)
        request.setHeader('Content-Type', 'image/' + format)
        f = open(fname, 'rb')
        return f.read()
        #return retval

class BdmplotDaemon(bdmplot_daemon.Daemon):
    def run(self):
        main()

def startup():
    global options

    # parse options 
    parser = optparse.OptionParser()
    parser.add_option("-p", "--port", dest="port",
                      help="Webserver port.", 
                      metavar="<port>",
                      default="8082")
    parser.add_option("-b", "--default-bdm-id", dest="bdm_id",
                      help=optparse.SUPPRESS_HELP,
                      metavar="<ID>",
                      default="*")
    parser.add_option("-d", action="store_true", dest="daemonize",
                      help="Become a daemon",
                      default=False)
    parser.add_option("-k", action="store_true", dest="killdaemon",
                      help="Kill the running bdmplot daemon",
                      default=False)
    
    (options, args) = parser.parse_args()

    daemon = BdmplotDaemon('/var/run/bdmplot.pid', stderr='/var/log/bdmplot.log')
    if(options.killdaemon == True):
        daemon.stop()
        exit(0)

    if(options.daemonize == True):
        daemon.start()
    else:
        main()

def main():
    twisted_bdmclient = BdmClient()

    #register BDM callbacks
    pybdm_register_callback_new_hab(cb_new_hab, None)
    pybdm_register_callback_lost_hab(cb_lost_hab, None);
    pybdm_register_callback_new_node(cb_new_node, None);
    pybdm_register_callback_lost_node(cb_lost_node, None);
    pybdm_register_callback_datapoint(cb_datapoint, None);
    
    full = Datapoints()
    
    root = TwistedResource()
    root.putChild('bdmplot', full)
    factory = Site(root)
    
    reactor.listenTCP(int(options.port), factory)
    reactor.addReader(twisted_bdmclient)
    
    reactor.run()


if __name__ == "__main__":
    startup()
