
Building on WindowsCE:

    Device: ACC Systems 570 (PXA 270 520MHz ARMv5 Processor)

Major Porting Issues:
    1.  mDNS-SD: No Bonjour for winCE. 

        We will have to either port mDNSResponder to a wince service, compile
        it into our library, or roll our own that only publishes. 
        
        Some reports on success compiling the mDNS stack into an application:
          - http://lists.apple.com/archives/bonjour-dev/2007/Mar/msg00001.html

        Est: 20h
        Risk: 10h-80h 


    2.  Glib: There is no GLIB for WinCE. It looks like there are clear
        instruction to cross-compile for Win32. WinCE is the last thing on the
        priority list for Gnome: http://live.gnome.org/GTK%2B/Win32
        
        There is a gtk-wince project on SF that may be useful: 
        http://sourceforge.net/projects/gtk-wince/, but it may be dead.

        If those fail, we'd need to replicate the API in custom code. I did a
        brief survey of g_* functions, and I found that we use the following
        bits of glib for the hab library: 
         - g_hash
         - g_list / g_slist
         - g_queue
         - g_thread
         - g_warn / g_log ....

        Est: 40h
        Risk: 40h-120h

    3.  System API: There are a number of standard POSIX system APIs used by
        bionet:
         - libc: WinCE provides an ANSI compatible version
         - Sockets: WinCE 5.0 supports winsock 2.2 which is nearly identical 
                    to Berkeley sockets. Little porting effort.
         - Threads: WinCE supports threads much like Windows. Our code will
                    need to be ported to that API. (Maybe using GThreads?)
         - Pipes:   The threads communicate via pipes. I don't think that
                    this will work on WinCE, so this may have to be
                    implemented as queue with thread sync, or something
                    else...

        Est: 40h
        Risk: 20h-60h
        
    4.  Build DLLs for WinCE. There is no explicit support mentioned to build
        DLLs on the CeGCC page, but mingw32 does support it. Also the DLL
        generated will link against a specific version of the windows system
        DLL. If we generate a DLL with CeGCC, we may end up requiring that
        our users use an specific, old version of Visual C++ to compile it. 
        
        Alternate option may be to generate a static library that the app
        developer would have to statically compile in. Note, that this would
        have to include mDNSResponder, GLib2, and all of its deps....

        Est: 20h
        Risk: 20h-160h

    5.  OpenSSL: There are instructions to build openSSL for WinCE on
        a windows platform using Embedded Visual C++ 3.0.

        To not use OpenSSL, we need to add our own IO abstraction to replace
        the 'BIO' interface when compiling for WinCE. (That might be the best
        approach).

        Est: 16h
        Risk: 8h-80h


    6.  Process model (Good News):  
    
        From http://msdn.microsoft.com/en-us/library/aa450600.aspx:
          - Windows CE 5.0 is a preemptive multitasking operating system.
          - Up to 32 processes may run simultaneously within the system
          - A process may create an "unspecified" number of additional
            threads
          - There is a system thread limit
          - The OEM may limit 3rdparty applications to lower priorities

        Est: 0h


    7.  Integration/Debugging: The MS WinCE development environment will 
        likely have a whole lot of idiosyncrasies that won't show up until we
        start using it. Especially with a hybrid VisualC++/CeGCC approach.

        There is no way to know for sure if CeGCC will work for us until we
        do it. Despite this, I still think it is the best way to go. In terms
        of code changes to bionet, it is a subset of the changes required for
        the other approaches. The next step would be to compile with gcc in a
        cygwin environment, then finally to compile with Microsoft's
        toolchain (Which requires a whole lot of changes to our source and
        a new make system)

        I've used the Windows CE device emulator, and it shows promise. It
        has internet access, and I can get stuff on it via a storage card.
        It will run any WinCE image generated by the "Platform Builder" tool,
        which you would use to develop a wince OS for your custom hardware. If
        we want to use the emulator, we'd need to get an image for the ACC
        device.

        CeGcc debugging. There are instructions to do remote GDB debugging on
        actual hardware with CeGCC, which sounds awesome. There's pretty clear
        instructions, but there still may be issues setting it up if we need
        to debug the hab.dll

        Est: 60h
        Risk:  40h-80h

        

vim: sw=4 sta expandtab tw=77 si
