#!/usr/bin/perl -w
#
# Copyright (c) 2008-2010, Regents of the University of Colorado.
# This work was supported by NASA contracts NNJ05HE10G, NNC06CB40C, and
# NNC07CB47C.
#


# FIXME: rewrite to use "bionet-watcher --nodes *.*.*"


use POSIX ":sys_wait_h";


my $bstream = "../../client/stream/bionet-stream";
my $pipe = "./pipe.sh";

my $nag = "localhost";

my $dest = "Alsa.Bldg-36-CEC-2.USB-Audio:Speaker";

my $target = "AK";

my %running_streams = ();




sub REAPER {
    my $child;

    # If a second child dies while in the signal handler caused by the
    # first death, we won't get another signal. So must loop here else
    # we will leave the unreaped child as a zombie. And the next time
    # two children die we get another zombie. And so on.

    while (($child = waitpid(-1,WNOHANG)) > 0) {
        print "child $child died\n";

        for my $stream (keys %running_streams) {
            if ($child == $running_streams{$stream}->{PID}) {
                delete $running_streams{$stream};
                print "stream from $stream ended\n";
            }
        }
    }
    $SIG{CHLD} = \&REAPER;  # still loathe sysV
}

$SIG{CHLD} = \&REAPER;




while (1) {
    my @targets = `$bstream --nag $nag | grep ' Producer ' | grep '$target'`;

    for my $src (@targets) {
        $src =~ s/^\s*(\S+)\s.*$/$1/s;
        if (defined $running_streams{$src}) { next; }
        print "new source: $src\n";

        my $pid = fork();
        if ($pid == 0) {
            # child
            my $cmd = "$pipe --nag $nag $src $dest";
            print "running: $cmd\n";
            exec $cmd;
        }

        # parent

        my $stream;
        $stream->{PID} = $pid;
        
        $running_streams{$src} = $stream;
    }

    sleep 5;
} 

