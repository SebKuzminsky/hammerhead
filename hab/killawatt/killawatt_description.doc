Author: Ilana Bellowe

Abstract: 
    Kill-A-Watts are devices that display energy data from an appliance. They display voltage, amperes, watts, hertz, and kilawatt hours. With the implementation of an xbee radio device, they can be used to send this data to a receiver that is plugged into a computer. The energy output can then be displayed and analyzed. The main goal of these devices is to conserve energy and understand which devices in a home or company are wasting energy. They can also be used to determine large changes in energy that a device is using. 

Implementation: 

    Purchase: 
    In order to construct the Kill-A-Watt system, first you must purchase the Kill-A-Watts and xbee radio devices (on Adafruit they are called Tweet-A-Watt). First, I bought the "Tweet-a-Watt starter pack" for $90. This is good if you want both a receiver, transmitter, and usb outlet. Since we already have two usb outlets, I have increased the system size with "Tweet-a-Watt add-on outlet kit" which costs $40. Since this even includes excess parts, it may make sense if ordering large quantities to order just the board and parts separately. Currently the system includes 3 working receivers, 1 broken receiver, and 6 Kill-A-Watt transmitters.
    
    Assembly: 
    There are detailed assembly instructions online at http://www.ladyada.net/make/tweetawatt/. After assembly, the xbees must be configured or the devices will not transmit data effectively. In order to configure the xbees, use the program "X-CTU." This program will allow you to update the firmware on the devices. To continue with the protocol I have established, the numbering of new transmitters should begin at 7. This process is also described in detail on the ladyada website. 
    
    Wattcher scripting: 
    At this same website, there are pre-made scripts which I used as a basis for the Kill-A-Watt system. This basic script also makes it easy to check that the hardware is functioning properly and that the changes made to the script have not worsened the data output. Though these scripts are not helpful in interfacing with bionet, they include some information about interfacing with twitter which may come in handy. The script that is amended for BioNet usage is in the hab directory. 
    First, I manipulated the script to interface with BioNet. To do this, I added the line "from hab import *." Then, I connected to BioNet, check if there is a new node, created a new node if so and reported it. When connecting a program to BioNet it is imperative to add checks that verify that everything is connected properly. Therefore, for each of the steps delineated in this section, there is a check that the process has occurred correctly. For example, in lines 38-42 or wattcher.py, after the device attempts to connect with BioNet, if it doesn't connect properly, it will catch the disconnect and exit the program. Besides connecting to BioNet which is part of the initialization of the program and should not be done in a loop as data is collected, all of the other BioNet related code is in a seperate function named "add_node" so that every time the receiver gets data, a new node may be added if one exists. This function is called early in the main function, "update_graph." "Update_graph" was the initial function given in the basic code though it initially contained much more superfluous applications. 
    Then I changed the calculations so that the data I desired for display would be calculated. These calculations improve the clarity of the script by eliminating processes that bionet does automatically. To improve clarity, the majority of calulations were also added to a separate function, "calculations." It also averages data readings over a period of time that the user may specify and only reads out the averages rather than reporting data every time the receiver gets a packet. I manipulated the time storing mechanism to use it to measure between readings to bionet as the user decides to set the interval. In order to calculate these averages, the program implements a few dictionaries which store the data and allow the program to function with multiple kill-a-watts and store the data for each separately. I added the functionality of Total Kilawatt Hours to the calculations. 
    An aspect of the original script that was unsuitable for the bionet system was that after a device was removed, the program would continue to attempt to read out data for the removed device. This would cause the program to crash with data errors. To allow the program to continue running when devices were added and removed, I created two calculations which check for bad voltage and bad current data before starting the calculations. To do this, I slightly amended the sensorhistory script to add a new function which would test for an active Kill-a-Watt. In the main wattcher.py script, if the Kill-a-Watt is tested to be dead, then all of the data stored for the Kill-A-Watt is deleted.
    I also created parsing options (optparse) which allow the user to change settings manually. In order to add these options, I imported optparse and added the lines "parser = optparse.OptionParser()" then the options, then the line "(options, args) = parser.parse_args()". The options are added by writing the script "parser.add_option()" which takes the arguments for how to call the option, destination, default, help, and a metavariable. For the Kill-a-Watt, the calls for specialized settings are -i which allows the user to change the interval that data is reported, -d which changes the debug level, -s which changes the serial port. If the program is run, but gives an error, the most likely cause is that the default serial port is not the serial port that the computer is recognizing for the device. To check what serial port the device is plugged into using the terminal, use the command "dmesg | grep tty."
    Additionally, I added BioNet's logger for debugging purposes. I added many levels of debugging to include simple data read-outs or critical messages when there is a software/hardware error interfacing with bionet.

    Warn client:
    The Kill-a-Watt now interfaces with the bionet-warn client which is in the BioNet client directory. It is currently used to e-mail interested parties when the coffeepot and teapot are on and when they are ready to be used. The bionet-warn client can run different configuration files that tell it some basic commands. The configuration file gives the following information: resource, compare, command. Resource gives the bionet hab that will give the data that is tested by the warn client. Compare gives the testing value for the resource given. Command tells the warn client how to warn the user about whatever was previously checked for.
    In the case of the Kill-a-Watt, the resource is the particular Tweet-a-Watt.The configuration script includes functions that can tell when a device is turned on and when it turns off that are the information the warn client compares. The command the Kill-a-Watt script uses is an e-mail client that sends an e-mail to a mailing list with a particular message.
    For the warn client for the teapot/coffeepot, the compare command tests the value of watts in the kill-a-watt hab. It uses a switch that determines if the coffeepot has gone from on to off and sends the initial message to alert the subscribers that the device has been turned on. Then when the device turns itself off and the wattage drops signifying the device is ready, the switch sends a new message and a twitter message telling the subscribers that the device is ready.
    This e-mail client is called teapotmail, but it is broader than the name implies. It simply connects to an e-mail smtp server. It uses optparse (a bionet tool for allowing the user to change options in a file without changing the file as mentioned above) to give the user maximum operability. The options it gives are -s which chooses the sending e-mail address, -r which chooses the receiving mail address, and -c which chooses the smtp address that is desired by the user. One caveat of the program is that with a maximum security e-mail client, the e-mails may not arrive at the receiver. For example, the teapot and coffeepot lists do not allow mail to be sent from a member that is not part of the list. To bypass this problem, the sender e-mail must be added to the list. If the address is not a real address, the address must be manually added to the group by the group creator. 
    There is also another client for the teapot/coffeepot. This is the teapottwitter client. It will send a twitter message to the killawatt1217 twitter account that tells the subscriber that the coffeepot/teapot is on/ready as the e-mail client sends e-mails. There are some minor qualms about the teapottwitter client. Twitter does not allow a user to send the same message repeatedly. So, in order to bypass this issue, I installed "fortune" onto the computer that runs the warn client and it changes the end of the message each time to read out a fortune as well as the information about the coffeepot/teapot. This improves the likeliness that a message will go through the twitter anti-spam blockers. However, there is concern that twitter will block this account as spam when it realizes that this simple bypass tool is being used. This client also allows for a variety of options. It calls for the username, password, and desired message. Then it sends that information to twitter.
    It is important when using two clients such as the email and twitter clients, that they are used simultaneously rather than having the computer randomly choose which gets precedence because as the teapot/coffeepot configuration file is set up, if there are multiple clauses, the computer will not run both. 
    It is possible to use the teapot clients to simply read out a message to the terminal if desired. To do this, simply change the command "echo" followed by a message.


Future possibilities:
    - *The configuration software is only accessible with a Windows OS. It may be a good idea at some point to rewrite configuration software compatible with linux.

    - The technology for these devices is imperfect. Somehow it could be helpful to figure out a way to improve the values that the kill-a-watt reads.

