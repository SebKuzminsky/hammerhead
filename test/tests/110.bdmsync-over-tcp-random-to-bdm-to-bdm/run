#!/bin/bash
#
# Copyright (c) 2008-2010, Regents of the University of Colorado.
# This work was supported by NASA contracts NNJ05HE10G, NNC06CB40C, and
# NNC07CB47C.
#



if [ -z "$ROOT" ]; then
    echo "ROOT environment variable is undefined"
    exit 1
fi

if [ -z "$TEST_DURATION" ]; then
    TEST_DURATION=30
fi

. ../../testlib.sh

UNIQUE=$$
RETVAL=0


YEAR=`date +%Y`
PREV_YEAR=$(($YEAR-1))
NEXT_YEAR=$(($YEAR+1))

ulimit -Sc unlimited
rm -f core core.*

GENTESTPATTERN=true

echo "removing old DB file, and allowing bionet-data-manger to create schema"
rm -f orig-bdm.db sync-bdm.db

echo starting TCP sync receiver BDM
rm -f sync-recv.log
$ROOT/data-manager/server/bionet-data-manager -x bdm.ini.test --file sync-bdm.db --id sync-receive-$UNIQUE --no-resources --tcp-sync-receiver --debug --log-file=sync-recv.log &
RECVPID=$!

echo starting TCP sync sender BDM
rm -f sync-send.log
$ROOT/data-manager/server/bionet-data-manager -x bdm.ini.test --file orig-bdm.db --id sync-send-$UNIQUE --filter "random-hab.$UNIQUE.*:*" --sync-sender-config $ROOT/test/tests/110.bdmsync-over-tcp-random-to-bdm-to-bdm/test.cfg --port 11111 --debug --log-file=sync-send.log &
SENDPID=$!
sleep 6 # let the bdm come up before starting the HAB

if $GENTESTPATTERN; then
	echo starting Test-patern-hab generator
	rm -f test-pattern.in
	$ROOT/client/watcher/bionet-watcher --output-mode test-pattern  >| test-pattern.in &
	WATCHERPID=$!


	echo starting random-hab
	$ROOT/hab/random/random-hab --id $UNIQUE --output-mode bdm-client --max-delay 1 >| out.random-hab &
	HABPID=$!
else
	echo starting test-pattern-hab
	$ROOT/hab/test-pattern/test-pattern-hab --id $UNIQUE --output-mode bdm-client test-pattern.in >| out.random-hab &
	HABPID=$!

fi

sleep 30

echo "killing random-hab"
kill $HABPID
wait $HABPID

sleep 15
#$ROOT/data-manager/scripts/bdm-client.py -o chrono -s localhost -p 11111 -T "$PREV_YEAR-01-01 00:00:00" -t "$NEXT_YEAR-12-31 12:59:59" -r "random-hab.$UNIQUE.*:*" >| out.bdm-orig
$ROOT/data-manager/client/bdm-client/bdm-client -s localhost -p 11111 -T "$PREV_YEAR-01-01 00:00:00" -t "$NEXT_YEAR-12-31 12:59:59" -r "random-hab.$UNIQUE.*:*" >| out.bdm-orig 2> err.bdm-sync
echo "test run complete. killing the TCP sync sender BDM"
kill $SENDPID
wait $SENDPID

echo "getting data from TCP sync receiver BDM"


#$ROOT/data-manager/scripts/bdm-client.py -o chrono -s localhost -T "$PREV_YEAR-01-01 00:00:00" -t "$NEXT_YEAR-12-31 12:59:59" -r "random-hab.$UNIQUE.*:*" >| out.bdm-sync
$ROOT/data-manager/client/bdm-client/bdm-client -s localhost -T "$PREV_YEAR-01-01 00:00:00" -t "$NEXT_YEAR-12-31 12:59:59" -r "random-hab.$UNIQUE.*:*" >| out.bdm-sync 2>err.bdm-sync

echo "killing BDM"
kill $RECVPID
if $GENTESTPATTERN; then
	kill $WATCHERPID
fi
wait


normalize_bdm_client out.random-hab > norm.random-hab

for x in bdm-orig bdm-sync; do
    normalize_bdm_client out.$x > norm.$x
    if ! diff -q norm.random-hab norm.$x; then
	echo "ERROR: $x output differs from random-hab output:"
	diff -u norm.random-hab norm.$x
	RETVAL=1
    else
	echo "$x output is identical to random-hab output, yay"
    fi
done

if ! diff -q out.bdm-orig out.bdm-sync; then
    echo "ERROR: Sync'd BDM output differs from Original:"
    diff -u out.bdm-orig out.bdm-sync
    RETVAL=1
else
    echo "Sync'd BDM output is identical to original, yay"
fi


exit $RETVAL

