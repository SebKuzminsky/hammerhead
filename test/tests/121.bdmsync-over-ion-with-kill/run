#!/bin/bash
#
# Copyright (c) 2008-2010, Regents of the University of Colorado.
# This work was supported by NASA contracts NNJ05HE10G, NNC06CB40C, and
# NNC07CB47C.
#


if [ -z "$ROOT" ]; then
    echo "ROOT environment variable is undefined"
    exit 1
fi

if [ -z "$TEST_DURATION" ]; then
    TEST_DURATION=30
fi

. $ROOT/test/testlib.sh
. $ROOT/test/config.sh

if [ -z "$ENABLE_ION" ]; then
    echo "Bionet not configured with ION. Skipping test"
    exit 3
fi

UNIQUE=$$
RETVAL=0

sync_complete(){
    sendlog=$1
    recvlog=$2

    test `grep -c 'Sending bundle with payload' $sendlog` -le  `grep -c 'Processing a bundle'  $recvlog`
}

# We REALLY need to cleanup if we can
on_die()
{
    test_error "Test interrupted with signl"
}
trap 'on_die' TERM INT

test_error()
{
    test_log "Error running test: $@"

    echo "Killing jobs: " `jobs -p`
    kill `jobs -p`
    echo "Waiting for all jobs"
    wait

    echo "Stopping ION..."
    ionstop

    echo "Running killm"
    killm > /dev/null

    exit 2
}

YEAR=`date +%Y`
PREV_YEAR=$(($YEAR-1))
NEXT_YEAR=$(($YEAR+1))


rm -f core core.*
rm -f ion.log

echo "removing old DB files"
rm -f orig-bdm.db sync-bdm.db

echo starting ION Loopback interface
CONFIGDIR="./ionconfig"
ionstart                           \
    -i ${CONFIGDIR}/loopback.ionrc \
    -b ${CONFIGDIR}/loopback.bprc  \
    -p ${CONFIGDIR}/loopback.ipnrc



# receive the message and store it in a file via test bundle sink
echo "Starting ION sync receiver BDM"
rm -f sync-recv.log
$ROOT/data-manager/server/bionet-data-manager -x bdm.ini.test --file sync-bdm.db --id sync-recv-$UNIQUE --no-resources --dtn-endpoint-id 'ipn:1.1' --dtn-sync-receiver --debug --log-file=sync-recv.log &
RCVPID=$!

echo starting ION sync sender BDM
rm -f sync-send.log
$ROOT/data-manager/server/bionet-data-manager -x bdm.ini.test --file orig-bdm.db --id sync-send-$UNIQUE --filter "random-hab.$UNIQUE.*:*" --dtn-endpoint-id 'ipn:1.2' --sync-sender-config  sync-send.cfg --port 11111  --debug --log-file=sync-send.log&
SENDPID=$!
time_watch 60 grep -i "connected to bionet" sync-send.log || test_error "bdm didn't start"
sleep 5 # let the bdm come up before starting the HAB

echo starting random-hab
$ROOT/hab/random/random-hab --id $UNIQUE --output-mode bdm-client --max-delay 1 >| out.random-hab &
HABPID=$!

echo "Generating data for a while..."
sleep `expr $TEST_DURATION / 2`

echo "killing the ION sync receiver BDM"
kill $RCVPID
wait $RCVPID
sleep 20 

echo re-starting ION sync receiver BDM
$ROOT/data-manager/server/bionet-data-manager -x bdm.ini.test --file sync-bdm.db --id sync-recv-$UNIQUE --no-resources --dtn-endpoint-id 'ipn:1.1' --dtn-sync-receiver --debug --log-file=sync-recv.log &
RCVPID=$!

sleep `expr $TEST_DURATION / 2`

echo "test run complete, killing random-hab"
kill $HABPID
wait $HABPID

echo "Waiting for all data to sync"
time_watch 60 grep ": lost hab: random-hab.$UNIQUE"  sync-send.log || test_error "Never saw hab go away"
sleep 5 # Wait at leat one sync-send interval
if ! time_watch 120 sync_complete sync-send.log sync-recv.log; then
    echo "Sync incomplete"
    grep 'Sending bundle with payload' sync-send.log
    grep 'Processing a bundle'  sync-recv.log
    test_error "Data hasn't sync'd completely"
fi


echo "getting data from ION sync sender BDM"
$ROOT/data-manager/scripts/bdm-client.py -o chrono -s localhost -p 11111 -T "$PREV_YEAR-01-01 00:00:00" -t "$NEXT_YEAR-12-31 12:59:59" -r "random-hab.$UNIQUE.*:*" >| out.bdm-orig

echo "killing the ION sync sender BDM"
kill $SENDPID
wait $SENDPID

echo "getting data from TCP sync receiver BDM"

$ROOT/data-manager/scripts/bdm-client.py -o chrono -s localhost -T "$PREV_YEAR-01-01 00:00:00" -t "$NEXT_YEAR-12-31 12:59:59" -r "random-hab.$UNIQUE.*:*" >| out.bdm-sync

echo "killing ION Sync Receive BDM"
kill $RCVPID
wait $RCVPID

normalize_bdm_client out.random-hab > norm.random-hab

for x in bdm-orig bdm-sync; do
    normalize_bdm_client out.$x > norm.$x
    if ! diff -q norm.random-hab norm.$x; then
	echo "ERROR: $x output differs from random-hab output:"
	diff -u norm.random-hab norm.$x
	RETVAL=1
    else
	echo "$x output is identical to random-hab output, yay"
    fi
done

if ! diff -q out.bdm-orig out.bdm-sync; then
    echo "ERROR: Sync'd BDM output differs from Original:"
    diff -u out.bdm-orig out.bdm-sync
    RETVAL=1
else
    echo "Sync'd BDM output is identical to original, yay"
fi

if ! check_db_sync_acks orig-bdm.db; then
    echo "ERROR: Some syncs still unacknowledged"
    RETVAL=1
fi

# see what we got
bpstats

# shut down ion processes
echo "Stopping ion..."
ionstop
killm

exit $RETVAL

