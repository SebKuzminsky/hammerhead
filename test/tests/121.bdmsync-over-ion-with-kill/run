#!/bin/bash
#
# Copyright (c) 2008-2009, Regents of the University of Colorado.
# This work was supported by NASA contracts NNJ05HE10G, NNC06CB40C, and
# NNC07CB47C.
#


if [ -z "$ROOT" ]; then
    echo "ROOT environment variable is undefined"
    exit 1
fi

if [ -z "$TEST_DURATION" ]; then
    TEST_DURATION=30
fi


. $ROOT/test/config.sh

if [ -z "$ENABLE_ION" ]; then
    echo "Bionet not configured with ION. Skipping test"
    exit 3
fi

UNIQUE=$$
RETVAL=0

# We REALLY need to cleanup if we can
on_die()
{
    kill %1
    kill %3
    kill %4
    kill %5
    killm
    exit 2
}
trap 'on_die' TERM INT

YEAR=`date +%Y`
PREV_YEAR=$(($YEAR-1))
NEXT_YEAR=$(($YEAR+1))


rm -f ion.log

echo "making DB file"
rm -f orig-bdm.db
sqlite3 orig-bdm.db < $ROOT/data-manager/server/schema
cp orig-bdm.db sync-bdm.db

echo starting ION Loopback interface
CONFIGDIR="./ionconfig"
ionstart -I ${CONFIGDIR}/loopback.rc


# receive the message and store it in a file via test bundle sink
echo "Starting ION sync receiver BDM"
$ROOT/data-manager/server/bionet-data-manager --file sync-bdm.db --id sync-recv --habs "X.X" --nodes "X.X.X" --resources "X.X.X:X" --dtn-endpoint-id 'ipn:1.1' --dtn-sync-receiver &

echo starting ION sync sender BDM
$ROOT/data-manager/server/bionet-data-manager --file orig-bdm.db --id sync-send --habs "random-hab.$UNIQUE" --nodes "random-hab.$UNIQUE.*" --resources "random-hab.$UNIQUE.*:*" --dtn-endpoint-id 'ipn:1.2' --sync-sender-config  ${CONFIGDIR}/sync-send.cfg --port 11111 &
sleep 12 # let the bdm come up before starting the HAB

echo starting random-hab
$ROOT/hab/random/random-hab --id $UNIQUE --output-mode bdm-client --max-delay 1 >| out.random-hab &

echo "Generating data for a while..."
sleep `expr $TEST_DURATION / 2`

echo "killing the ION sync receiver BDM"
kill %1
wait %1
sleep 20 

echo re-starting ION sync receiver BDM
$ROOT/data-manager/server/bionet-data-manager --file sync-bdm.db --id sync-recv --habs "X.X" --nodes "X.X.X" --resources "X.X.X:X" --dtn-endpoint-id 'ipn:1.1' --dtn-sync-receiver &

sleep `expr $TEST_DURATION / 2`

echo "test run complete, killing random-hab"
kill %3
wait %3

sleep 30
echo "killing the ION sync sender BDM"
kill %2
wait %2

echo "getting data from TCP sync receiver BDM"
if [ -z "$PYTHONPATH" ]; then
    export PYTHONPATH=$ROOT/data-manager/py-client:$ROOT/data-manager/py-client/.libs
else
    export PYTHONPATH=$ROOT/data-manager/py-client:$ROOT/data-manager/py-client/.libs:$PYTHONPATH
fi
export DYLD_LIBRARY_PATH=$ROOT/util/.libs:$ROOT/asn.1/.libs
export LD_LIBRARY_PATH=$ROOT/util/.libs:$ROOT/asn.1/.libs



$ROOT/data-manager/scripts/bdm-client.py -o chrono -s localhost -T "$PREV_YEAR-01-01 00:00:00" -t "$NEXT_YEAR-12-31 12:59:59" -r "random-hab.$UNIQUE.*:*" >| out.bdm-client.py

echo "killing ION Sync Receive BDM"
kill %4
wait

if ! diff -q out.random-hab out.bdm-client.py; then
    echo "ERROR: bdm-client.py output differs from random-hab output:"
    diff -u out.random-hab out.bdm-client.py
    RETVAL=1
else
    echo "bdm-client.py output is identical to random-hab output, yay"
fi

# shut down ion processes
echo "Stopping ion..."
ionstop
killm

exit $RETVAL

