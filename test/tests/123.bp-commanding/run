#!/bin/bash
#
# Copyright (c) 2008-2010, Regents of the University of Colorado.
# This work was supported by NASA contracts NNJ05HE10G, NNC06CB40C, and
# NNC07CB47C.
#

set -e


source $ROOT/test/config.sh


if [ -z "$ENABLE_ION" ]; then
    echo "Bionet not configured with ION. Skipping test"
    exit $TEST_SKIP_CODE
fi


if [ -z "$ROOT" ]; then
    echo "ROOT environment variable is undefined"
    exit $TEST_SKIP_CODE
fi


# We REALLY need to cleanup if we can
cleanup() {
    kill %1
    kill %2
    kill %3
    killm
}


on_die() {
    cleanup
    exit $TEST_FAIL_CODE
}

trap on_die EXIT


UNIQUE=$$

STRING_RESOURCE="commandable.$UNIQUE.set-me:commandable-String"
STRING_BIONET_VALUE="hey from bionet"
STRING_BP_VALUE="this one's via BP"

INT32_RESOURCE="commandable.$UNIQUE.set-me:commandable-Int32"
INT32_BIONET_VALUE="123"
INT32_BP_VALUE="5678"

SRC_EID="ipn:1.1"
DEST_EID="ipn:1.2"


echo starting ION Loopback interface
rm -f ion.log
CONFIGDIR="./ionconfig"
ionstart                           \
    -i ${CONFIGDIR}/loopback.ionrc \
    -l ${CONFIGDIR}/loopback.ltprc \
    -b ${CONFIGDIR}/loopback.bprc  \
    -p ${CONFIGDIR}/loopback.ipnrc


echo starting bionet-watcher
rm -f out.bionet-watcher
$ROOT/client/watcher/bionet-watcher --habs "*.$UNIQUE" --nodes "*.$UNIQUE.*" --resources "*.$UNIQUE.*:*" >| out.bionet-watcher &

echo starting commandable-hab
rm -f out.commandable-hab
$ROOT/hab/commandable/commandable-hab --id $UNIQUE >| out.commandable-hab &
sleep 1


echo commanding first directly via bionet
$ROOT/client/commander/bionet-commander $STRING_RESOURCE "$STRING_BIONET_VALUE"
$ROOT/client/commander/bionet-commander $INT32_RESOURCE "$INT32_BIONET_VALUE"
sleep .5

VAL=$($ROOT/client/get/bionet-get $STRING_RESOURCE)
if [ "$VAL" != "$STRING_BIONET_VALUE" ]; then
    echo "error commanding directly via bionet!"
    echo "tried to set $STRING_RESOURCE to '$STRING_BIONET_VALUE', but ended up with '$VAL'"
    exit $TEST_FAIL_CODE
fi

VAL=$($ROOT/client/get/bionet-get $INT32_RESOURCE)
if [ "$VAL" != "$INT32_BIONET_VALUE" ]; then
    echo "error commanding directly via bionet!"
    echo "tried to set $INT32_RESOURCE to '$INT32_BIONET_VALUE', but ended up with '$VAL'"
    exit $TEST_FAIL_CODE
fi

echo "commanding directly via bionet worked"


echo "starting bionet BP commanding proxy on $DEST_EID"
rm -f out.bionet-bp-command-proxy
$ROOT/data-manager/client/bp-commander/bionet-bp-command-proxy $DEST_EID >| out.bionet-bp-command-proxy &
sleep 1


echo "commanding via BP"
rm -f out.bionet-bp-commander
$ROOT/data-manager/client/bp-commander/bionet-bp-commander $SRC_EID $STRING_RESOURCE "$STRING_BP_VALUE" $DEST_EID
$ROOT/data-manager/client/bp-commander/bionet-bp-commander $SRC_EID $INT32_RESOURCE "$INT32_BP_VALUE" $DEST_EID
sleep 10

VAL=$($ROOT/client/get/bionet-get $STRING_RESOURCE)
if [ "$VAL" != "$STRING_BP_VALUE" ]; then
    echo "error commanding via BP!"
    echo "tried to set $STRING_RESOURCE to '$STRING_BP_VALUE', but ended up with '$VAL'"
    exit $TEST_FAIL_CODE
fi

VAL=$($ROOT/client/get/bionet-get $INT32_RESOURCE)
if [ "$VAL" != "$INT32_BP_VALUE" ]; then
    echo "error commanding via BP!"
    echo "tried to set $INT32_RESOURCE to '$INT32_BP_VALUE', but ended up with '$VAL'"
    exit $TEST_FAIL_CODE
fi

echo "commanding via BP worked!"


trap - EXIT
cleanup

exit $TEST_SUCCEED_CODE





exit $TEST_SKIP_CODE


UNIQUE=$$
BDM_ID=${HOSTNAME//\./-}
RETVAL=0

YEAR=`date +%Y`
PREV_YEAR=$(($YEAR-1))
NEXT_YEAR=$(($YEAR+1))


echo "making DB file"
rm -f bdm.db
sqlite3 bdm.db < $ROOT/data-manager/server/schema


# receive the message and store it in a file via test bundle sink
echo "Starting BDM"
$ROOT/data-manager/server/bionet-data-manager --id $BDM_ID --habs "X.X" --nodes "X.X.X" --resources "X.X.X:X" --dtn-endpoint-id 'ipn:1.1' --dtn-sync-receiver &

echo starting ION sync sender BDM
$ROOT/data-manager/server/bionet-data-manager --file orig-bdm.db --id sync-send-$SYNCUNIQUE --habs "random-hab.$UNIQUE" --nodes "random-hab.$UNIQUE.*" --resources "random-hab.$UNIQUE.*:*" --dtn-endpoint-id 'ipn:1.2' --sync-sender-config  bdm-sync-send.cfg --port 11111 &
sleep 12 # let the bdm come up before starting the HAB

echo starting random-hab
$ROOT/hab/random/random-hab --id $UNIQUE --output-mode bdm-client --max-delay 1 >| out.random-hab &

echo "Generating data for a while..."
sleep $TEST_DURATION


echo "test run complete, killing random-hab"
kill %3
wait %3

echo "Waiting for all data to sync"
sleep 30
echo "killing the ION sync sender BDM"
kill %2
wait %2

echo "getting data from TCP sync receiver BDM"

$ROOT/data-manager/scripts/bdm-client.py -o chrono -s localhost -T "$PREV_YEAR-01-01 00:00:00" -t "$NEXT_YEAR-12-31 12:59:59" -r "random-hab.$UNIQUE.*:*" >| out.bdm-client.py

echo "killing ION Sync Receive BDM"
kill %1
wait

if ! diff -q out.random-hab out.bdm-client.py; then
    echo "ERROR: bdm-client.py output differs from random-hab output:"
    diff -u out.random-hab out.bdm-client.py
    RETVAL=1
else
    echo "bdm-client.py output is identical to random-hab output, yay"
fi

# see what we got
bpstats

# shut down ion processes
echo "Stopping ion..."
ionstop
killm

exit $RETVAL

