#!/bin/bash
#
# Copyright (c) 2008-2010, Regents of the University of Colorado.
# This work was supported by NASA contracts NNJ05HE10G, NNC06CB40C, and
# NNC07CB47C.
#

#
# Test syncing with out-of-order bundle delivery
#
#
#


if [ -z "$ROOT" ]; then
    echo "ROOT environment variable is undefined"
    exit 1
fi

if [ -z "$TEST_DURATION" ]; then
    TEST_DURATION=30
fi

. $ROOT/test/testlib.sh
. $ROOT/test/config.sh

if [ -z "$ENABLE_ION" ]; then
    echo "Bionet not configured with ION. Skipping test"
    exit 3
fi

UNIQUE=$$
RETVAL=0

function dirempty() {
    RC=0
    for dir in "$@"; do
        if [ `ls "$dir" | wc -l` -gt 0 ]; then
            RC=1
        fi
    done

    return $RC
}

function dir_not_empty() {
    ! dirempty "$@"
}

# We REALLY need to cleanup if we can
on_die()
{
    echo "Killing jobs: " `jobs -p`
    kill `jobs -p`
    killm
    exit 2
}
trap 'on_die' TERM INT

test_error()
{
    echo "Error running test: $@"

    echo "Killing jobs: " `jobs -p`
    kill `jobs -p`

    echo "Stopping ION Node 1..."
    ionstop -k 0x100
    echo "Stopping ION Node 2..."
    ionstop -k 0x200

    echo "Running killm"
    killm > /dev/null

    exit 1

}

YEAR=`date +%Y`
PREV_YEAR=$(($YEAR-1))
NEXT_YEAR=$(($YEAR+1))

### Setup
##################################################

ulimit -Sc unlimited
rm -f core core.*

rm -f ion.log

test_log "removing old DB file, and allowing bionet-data-manger to create schema"
rm -f orig-bdm.db sync-bdm.db

### Start ION instances
##################################################
CONFIGDIR="./ionconfig"

rm -rf sdr1 sdr2
mkdir sdr1 sdr2

cat > ${CONFIGDIR}/settings1.ionconfig <<ENDCFG
configFlags 5
pathName ${PWD}/sdr1
ENDCFG
cat > ${CONFIGDIR}/settings2.ionconfig <<ENDCFG
configFlags 5
pathName ${PWD}/sdr2
ENDCFG


rm -rf filecla
mkdir filecla
mkdir filecla/host1 filecla/host2 filecla/host2-delay

test_log "Starting ION node 1..."
ionstart -I ${CONFIGDIR}/host1.rc -k 0x100
test_log "Starting ION node 2..."
ionstart -I ${CONFIGDIR}/host2.rc -k 0x200

### Start Sync Receiver
##################################################

test_log "Starting ION sync receiver BDM"
rm -f sync-recv.log
$ROOT/data-manager/server/bionet-data-manager -x bdm.ini.test --file sync-bdm.db --id sync-recv-$UNIQUE --ion-key 512 --no-resources --dtn-endpoint-id 'ipn:2.1' --dtn-sync-receiver  --debug --log-file=sync-recv.log &
RECVPID=$!

### Start Sync Sender
##################################################
test_log "starting ION sync sender BDM"
rm -f sync-send.log
$ROOT/data-manager/server/bionet-data-manager -x bdm.ini.test --file orig-bdm.db --id sync-send-$UNIQUE --ion-key 256 --filter "random-hab.$UNIQUE.*:*" --dtn-endpoint-id 'ipn:1.1' --sync-sender-config  bdm-sync-send.cfg --port 11111  --debug --log-file=sync-send.log &
SENDPID=$!

time_watch 60 grep -i "connected to bionet" sync-send.log || test_error "bdm didn't start"
sleep 5 # let the bdm come up before starting the HAB

$ROOT/data-manager/client/bdm-watcher/bdm-watcher -o bdm-client -T "$PREV_YEAR-01-01 00:00:00" -t "$NEXT_YEAR-12-31 12:59:59" \
	-r "sync-recv-$UNIQUE,sync-send-$UNIQUE/random-hab.$UNIQUE.*:*" \
	-n "sync-recv-$UNIQUE,sync-send-$UNIQUE/random-hab.$UNIQUE.*" \
	-h "sync-recv-$UNIQUE,sync-send-$UNIQUE/random-hab.$UNIQUE" \
	>| out.watch.bdm-sync &
WATCHPID=$!

test_log "starting random-hab"
$ROOT/hab/random/random-hab --id $UNIQUE --output-mode bdm-client --max-delay 1 >| out.random-hab &
HABPID=$!

test_log "Generating data. Waiting for first bundle...."
time_watch 20 dir_not_empty filecla/host2-delay || test_error "First bundle never generated"

### SyncBundles are being generated.
test_log "Sync bundles being generated. Waiting a bit..."
sleep 10


test_log "killing random-hab"
kill $HABPID
wait $HABPID

test_log "Waiting for most data to sync"
sleep 10

test_log "Manually delivering bundles in (mostly) reverse order..."
while dir_not_empty filecla/host2-delay; do
    for bdl in `ls -t filecla/host2-delay`; do
        mv filecla/host2-delay/$bdl filecla/host2
        touch filecla/host2/$bdl
        sleep 1
    done
done

test_log "Waiting for all data to sync"
time_watch 120 dirempty filecla/host2 || test_error "Data didn't sync in time"
sleep 5

$ROOT/data-manager/scripts/bdm-client.py -o chrono -s localhost -p 11111 -T "$PREV_YEAR-01-01 00:00:00" -t "$NEXT_YEAR-12-31 12:59:59" -r "random-hab.$UNIQUE.*:*" >| out.bdm-orig
test_log "killing the ION sync sender BDM"
kill $SENDPID
wait $SENDPID

test_log "getting data from TCP sync receiver BDM"

$ROOT/data-manager/scripts/bdm-client.py -o chrono -s localhost -T "$PREV_YEAR-01-01 00:00:00" -t "$NEXT_YEAR-12-31 12:59:59" -r "random-hab.$UNIQUE.*:*" >| out.bdm-sync

test_log "bplist, Node 1:"
bplist 0x100
test_log "bplist, Node 2:"
bplist 0x200

test_log "killing ION Sync Receive BDM"
kill $RECVPID
wait $RECVPID

kill $WATCHPID
wait $WATCHPID

test_log "bplist, Node 1:"
bplist 0x100
test_log "bplist, Node 2:"
bplist 0x200


# see what we got
bpstats 0x100
bpstats 0x200

# shut down ion processes
echo "Stopping ION Node 1..."
ionstop -k 0x100
echo "Stopping ION Node 2..."
ionstop -k 0x200
echo "Running killm"
killm > /dev/null

### Compare output files
##################################################
normalize_bdm_client out.random-hab > norm.random-hab

for x in bdm-orig bdm-sync watch.bdm-sync; do
    normalize_bdm_client out.$x > norm.$x
    if ! diff -q norm.random-hab norm.$x; then
	echo "ERROR: $x output differs from random-hab output:"
	#diff -u norm.random-hab norm.$x
	RETVAL=1
    else
	echo "$x output is identical to random-hab output, yay"
    fi
done

if ! diff -q out.bdm-orig out.bdm-sync; then
    echo "ERROR: Sync'd BDM output differs from Original:"
    #diff -u out.bdm-orig out.bdm-sync
    RETVAL=1
else
    echo "Sync'd BDM output is identical to original, yay"
fi

exit $RETVAL

