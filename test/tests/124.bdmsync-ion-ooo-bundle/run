#!/bin/bash
#
# Copyright (c) 2008-2010, Regents of the University of Colorado.
# This work was supported by NASA contracts NNJ05HE10G, NNC06CB40C, and
# NNC07CB47C.
#

#
# Test syncing with out-of-order bundle delivery
#
#
#


if [ -z "$ROOT" ]; then
    echo "ROOT environment variable is undefined"
    exit 1
fi

if [ -z "$TEST_DURATION" ]; then
    TEST_DURATION=30
fi

. $ROOT/test/testlib.sh
. $ROOT/test/config.sh

if [ -z "$ENABLE_ION" ]; then
    echo "Bionet not configured with ION. Skipping test"
    exit 3
fi

UNIQUE=$$
RETVAL=0

# We REALLY need to cleanup if we can
on_die()
{
    kill %1
    kill %3
    kill %4
    kill %5
    killm
    exit 2
}
trap 'on_die' TERM INT

YEAR=`date +%Y`
PREV_YEAR=$(($YEAR-1))
NEXT_YEAR=$(($YEAR+1))

ulimit -Sc unlimited
rm -f core core.*

rm -f ion.log

test_log "removing old DB file, and allowing bionet-data-manger to create schema"
rm -f orig-bdm.db sync-bdm.db

CONFIGDIR="./ionconfig"

rm -rf sdr1 sdr2
mkdir sdr1 sdr2

cat > ${CONFIGDIR}/settings1.ionconfig <<ENDCFG
configFlags 5
pathName ${PWD}/sdr1
ENDCFG
cat > ${CONFIGDIR}/settings2.ionconfig <<ENDCFG
configFlags 5
pathName ${PWD}/sdr2
ENDCFG


test_log "Starting ION node 1..."
ionstart -I ${CONFIGDIR}/host1.rc -k 0x100
test_log "Starting ION node 2..."
ionstart -I ${CONFIGDIR}/host2.rc -k 0x200


test_log "Starting ION sync receiver BDM"
rm -f sync-recv.log
$ROOT/data-manager/server/bionet-data-manager -x bdm.ini.test --file sync-bdm.db --id sync-recv-$UNIQUE --ion-key 512 --no-resources --dtn-endpoint-id 'ipn:2.1' --dtn-sync-receiver  --debug --log-file=sync-recv.log &
RECVPID=$!

test_log "starting ION sync sender BDM"
rm -f sync-send.log
$ROOT/data-manager/server/bionet-data-manager -x bdm.ini.test --file orig-bdm.db --id sync-send-$UNIQUE --ion-key 256 --filter "random-hab.$UNIQUE.*:*" --dtn-endpoint-id 'ipn:1.1' --sync-sender-config  bdm-sync-send.cfg --port 11111  --debug --log-file=sync-send.log &
SENDPID=$!

time_watch 60 grep -i "connected to bionet" sync-send.log
sleep 5 # let the bdm come up before starting the HAB

$ROOT/data-manager/client/bdm-watcher/bdm-watcher -o bdm-client -T "$PREV_YEAR-01-01 00:00:00" -t "$NEXT_YEAR-12-31 12:59:59" \
	-r "sync-recv-$UNIQUE,sync-send-$UNIQUE/random-hab.$UNIQUE.*:*" \
	-n "sync-recv-$UNIQUE,sync-send-$UNIQUE/random-hab.$UNIQUE.*" \
	-h "sync-recv-$UNIQUE,sync-send-$UNIQUE/random-hab.$UNIQUE" \
	>| out.watch.bdm-sync &
WATCHPID=$!

test_log "starting random-hab"
$ROOT/hab/random/random-hab --id $UNIQUE --output-mode bdm-client --max-delay 1 >| out.random-hab &
HABPID=$!

test_log "Generating data until first sync..."
time_watch 20 grep -i 'Syncd ' sync-send.log 

if true; then
test_log "Disconnecting node 1->node 2..."
ipnadmin 0x100 <<ENDOFBPADMINCOMMANDS
d plan 1
q
ENDOFBPADMINCOMMANDS

test_log "Disconnecting node 2->node 1..."
ipnadmin 0x200 <<ENDOFBPADMINCOMMANDS
d plan 1
q
ENDOFBPADMINCOMMANDS

sleep 10

test_log "Resuming bundle delivery"
echo `bplist 0x100 | grep -c '**** Bundle'` bundles in bplist 0x100...
echo `bplist 0x200 | grep -c '**** Bundle'` bundles in bplist 0x200...

test_log "Connecting node 2->node 1..."
ipnadmin 0x200 <<ENDOFBPADMINCOMMANDS
a plan 1 udp/*,127.0.0.1:4556
q
ENDOFBPADMINCOMMANDS
test_log "Connecting node 1->node 2..."
ipnadmin 0x100 <<ENDOFBPADMINCOMMANDS
a plan 1 udp/*,127.0.0.1:4556
q
ENDOFBPADMINCOMMANDS

sleep 10

else 
sleep 20
fi

test_log "killing random-hab"
kill $HABPID
wait $HABPID

test_log "Waiting for all data to sync"
sleep 30
if [ `bplist 0x100 | wc -l` -gt 0 ] || [ `bplist 0x200 | wc -l` -gt 0 ]; then
    test_log "Waiting for no bundles in ION..."
    for i in `seq 6`; do
	sleep 10
    	if [ `bplist | wc -l` -le 0 ]; then
	    break
        fi
    done
fi

$ROOT/data-manager/scripts/bdm-client.py -o chrono -s localhost -p 11111 -T "$PREV_YEAR-01-01 00:00:00" -t "$NEXT_YEAR-12-31 12:59:59" -r "random-hab.$UNIQUE.*:*" >| out.bdm-orig
test_log "killing the ION sync sender BDM"
kill $SENDPID
wait $SENDPID

test_log "getting data from TCP sync receiver BDM"

$ROOT/data-manager/scripts/bdm-client.py -o chrono -s localhost -T "$PREV_YEAR-01-01 00:00:00" -t "$NEXT_YEAR-12-31 12:59:59" -r "random-hab.$UNIQUE.*:*" >| out.bdm-sync

test_log "SDR contents:"
bplist

test_log "killing ION Sync Receive BDM"
kill $RECVPID
wait $RECVPID

kill $WATCHPID
wait $WATCHPID

test_log "SDR contents:"
bplist

normalize_bdm_client out.random-hab > norm.random-hab

for x in bdm-orig bdm-sync watch.bdm-sync; do
    normalize_bdm_client out.$x > norm.$x
    if ! diff -q norm.random-hab norm.$x; then
	echo "ERROR: $x output differs from random-hab output:"
	#diff -u norm.random-hab norm.$x
	RETVAL=1
    else
	echo "$x output is identical to random-hab output, yay"
    fi
done

if ! diff -q out.bdm-orig out.bdm-sync; then
    echo "ERROR: Sync'd BDM output differs from Original:"
    #diff -u out.bdm-orig out.bdm-sync
    RETVAL=1
else
    echo "Sync'd BDM output is identical to original, yay"
fi

# see what we got
bpstats

# shut down ion processes
echo "Stopping ION Node 1..."
ionstop -k 0x100
echo "Stopping ION Node 2..."
ionstop -k 0x200
killm

exit $RETVAL

