#!/bin/bash
#
# Copyright (c) 2008-2010, Regents of the University of Colorado.
# This work was supported by NASA contracts NNJ05HE10G, NNC06CB40C, and
# NNC07CB47C.
#

#Define to run with a test-pattern file, instead of random
#TEST_PATTERN=testpattern.in.a

if [ -z "$ROOT" ]; then
    echo "ROOT environment variable is undefined"
    exit 1
fi

if [ -z "$TEST_DURATION" ]; then
    TEST_DURATION=30
fi

. $ROOT/test/testlib.sh

UNIQUE=$$
RETVAL=0


YEAR=`date +%Y`
PREV_YEAR=$(($YEAR-1))
NEXT_YEAR=$(($YEAR+1))

ulimit -Sc unlimited
rm -f core core.*

make_bdm_db "bdm.db"

echo starting BDM
rm -f bdm.log
$ROOT/data-manager/server/bionet-data-manager -x bdm.ini.test --id "bdm-$UNIQUE" --filter "random-hab.$UNIQUE.*:*" --debug --log-file=bdm.log &
BDMPID=$!
sleep 3 # let the bdm come up before starting the HAB

WATCHCMD="$ROOT/data-manager/client/bdm-watcher/bdm-watcher --output-mode 'bdm-client' -T '$PREV_YEAR-01-01 00:00:00' -t '$NEXT_YEAR-12-31 12:59:59' --habs 'bdm-$UNIQUE,bdm-$UNIQUE/random-hab.$UNIQUE' --nodes 'bdm-$UNIQUE,bdm-$UNIQUE/random-hab.$UNIQUE.*' --resources 'bdm-$UNIQUE,bdm-$UNIQUE/random-hab.$UNIQUE.*:*'"

echo "bdm-watcher args: $WATCHCMD"


test_log "no datapoints generated, starting bdm-watcher.0"
eval "$WATCHCMD >| out.bdm-watcher.0 &"
WPID0=$!


if [ "$TEST_PATTERN" != "testpattern.in" ]; then
  test_log "Starting test-pattern-hab recorder"
  rm -f testpattern.in
  $ROOT/client/watcher/bionet-watcher --output-mode 'test-pattern' > testpattern.in &
  TPPID=$!
fi

test_log "starting random-hab"
if [ -z "$TEST_PATTERN" ]; then
  $ROOT/hab/random/random-hab --id $UNIQUE --output-mode bdm-client --max-delay 1 >| out.random-hab &
else
  $ROOT/hab/test-pattern/test-pattern-hab --id $UNIQUE --type random-hab --output-mode bionet-watcher --current-time "$TEST_PATTERN" >| out.random-hab &
fi
HABPID=$!

sleep `expr $TEST_DURATION / 2`

test_log "some datapoints generated, starting bdm-watcher.1"
eval "$WATCHCMD >| out.bdm-watcher.1 &"
WPID1=$!

if [ -z "$TEST_PATTERN" ]; then
  sleep `expr $TEST_DURATION / 2`

  test_log "all datapoints generated. Killing random-hab"
  kill $HABPID
  wait $HABPID
else
  wait $HABPID
  test_log "all datapoints generated. test-pattern-hab exited"
fi


# Let the BDM commit the last info to disk
sleep 10

test_log "all datapoints generated. Killing  bdm-watcher.0 and bdm-watcher.1"
kill $WPID0
kill $WPID1
wait $WPID0
wait $WPID1

test_log "all datapoints generated. Starting bdm-watcher.2"
eval "$WATCHCMD >| out.bdm-watcher.2 & "
WPID2=$!

sleep 15
kill $WPID2
wait $WPID2


test_log "Killing  bdm-watcher.2"

test_log "killing BDM"
kill $BDMPID
wait $BDMPID

if [ -n "$TPPID" ]; then
  kill $TPPID
  wait $TPPID
fi


normalize_bdm_client out.random-hab > norm.random-hab
for i in 0 1 2; do
    normalize_bdm_client out.bdm-watcher.$i > norm.bdm-watcher.$i
    sort out.bdm-watcher.$i > sorted.bdm-watcher.$i

    if ! diff -q norm.random-hab norm.bdm-watcher.$i; then
	echo "ERROR: bdm-watcher.$i output differs from random-hab output:"
	#diff -u norm.random-hab norm.bdm-watcher.$i
	RETVAL=1
    else
	echo "bdm-watcher.$i same as random-hab output"
    fi

done

for i in 1 2; do
    if ! diff -q sorted.bdm-watcher.0 sorted.bdm-watcher.$i; then
	echo "ERROR: bdm-watcher.$i output differs from bdm-watcher.0 output:"
	#diff -u norm.random-hab norm.bdm-watcher.$i
	RETVAL=1
    else
	echo "bdm-watcher.$i same as bdm-watcher.0 output"
    fi
done

if [ $RETVAL -eq 0 ] ; then
    echo "bdm-watcher output is identical to random-hab output, yay"
fi

exit $RETVAL

