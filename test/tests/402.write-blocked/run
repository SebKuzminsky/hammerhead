#!/bin/bash
#
# Copyright (c) 2008-2009, Regents of the University of Colorado.
# This work was supported by NASA contracts NNJ05HE10G, NNC06CB40C, and
# NNC07CB47C.
#

#
# This test is meant to simulate misbehaving peers and/or networks
# 
# It uses the test pattern hab o replay the exact traffic, to make sure
# all peers function properly in an un-friendly environment.
#
# The output of the testpattern hab is saved in a form that can be compared to
# bionet-watcher output after replacing the hab id placeholder with the
# value of $UNIQUE
#
# The watcher is started before and after the bad-hab, in case that matters
#


if [ -z "$ROOT" ]; then
    echo "ROOT environment variable is undefined"
    exit 1
fi

if [ -z "$TEST_DURATION" ]; then
    TEST_DURATION=30
fi

UNIQUE=$$
RETVAL=0

PYPATHADD=$ROOT/test/src/bonjour-py:$ROOT/test/src/bonjour-py/.libs:$ROOT/test/pylib:$ROOT/test/pylib
if [ -z "$PYTHONPATH" ]; then
    export PYTHONPATH=$PYPATHADD
else
    export PYTHONPATH=$PYPATHADD:$PYTHONPATH
fi

#Shrink the write buffer to ensure a write-blockage
export BIP_WRITE_BUFSIZE=1024

echo Making the test pattern input/output
sed -e "s/XXPIDXX/$UNIQUE/" < testpattern.out.head > testpattern.out
cat testpattern.in > testpattern.in.big
perl make_test_pattern.pl $UNIQUE >> testpattern.in.big 2>>testpattern.out
sed -e "s/XXPIDXX/$UNIQUE/" < testpattern.out.tail >> testpattern.out

echo starting first bionet-watcher
$ROOT/client/watcher/bionet-watcher --habs "test-pattern-hab.$UNIQUE" --nodes "test-pattern-hab.$UNIQUE.*" --resources "test-pattern-hab.$UNIQUE.*:*" >| out.watcher.0 &
WATCH1PID=$!

echo starting second bionet-watcher
$ROOT/client/watcher/bionet-watcher --habs "test-pattern-hab.$UNIQUE" --nodes "test-pattern-hab.$UNIQUE.*" --resources "test-pattern-hab.$UNIQUE.*:*" >| out.watcher.1 &
WATCH2PID=$!


echo Starting test-pattern-hab
$ROOT/hab/test-pattern/test-pattern-hab -i $UNIQUE testpattern.in.big &
TPHPID=$!
echo "[$!]"

sleep 5 # Let the watcher connect
echo Sending SIGSTOP to second watcher
kill -STOP $WATCH2PID

MYTIMEOUT=500
echo "Waiting $MYTIMEOUT seconds for test-pattern-hab"
x=0
while test "$x" -lt 500; do
    kill -0 $TPHPID 2>/dev/null || break
    sleep 1
    x=`expr $x + 1`
    echo -n "."
done
echo

if kill -0 $TPHPID 2> /dev/null; then
    echo "ERROR: test-pattern-hab still running after $MYTIMEOUT seconds"
    echo "This indicated it is blocking on a write"
    RETVAL=1
    kill -9 $TPHPID
else
	echo "test-pattern-hab finished"
fi

# The hab has gone away. Allow this client to continue to ensure that 
# any bugs weren't masked by the TCP send/recv buffers
kill -CONT $WATCH2PID



sleep 4  # to let the clients notice

echo "killing bionet-watcher 1 and 2"
kill $WATCH1PID
wait $WATCH1PID
kill $WATCH2PID
wait $WATCH2PID

if ! diff -q out.watcher.0 testpattern.out; then
    echo "ERROR: watcher output differs from test-pattern-hab output"
    #echo "Differences not shown. Look at output of:"
    #echo "  diff -u $PWD/testpattern.out $PWD/out.watcher.0"
    diff -u testpattern.out out.watcher.0
    RETVAL=1
else
    echo "watcher outputs are identical to test-pattern-hab output, yay"
fi


if  diff -q out.watcher.1 testpattern.out; then
    echo "ERROR: bad watcher output is the same as test-pattern-hab output"
    echo " This means the TCP send/recv buffers masked any errors that may have occured"
    RETVAL=1
fi

exit $RETVAL

