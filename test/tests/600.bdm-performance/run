#!/bin/bash
#
# Copyright (c) 2010, Regents of the University of Colorado.
# This work was supported by NASA contracts NNJ05HE10G, NNC06CB40C, and
# NNC07CB47C.
#

# Test Theory:
#
# Start a data-manager, then a test-pattern-hab in fast mode, then a highest-perf hab to 
# record the highest performance.
#

if [ -z "$ROOT" ]; then
    echo "ROOT environment variable is undefined"
    exit 1
fi

PYPATHADD=$ROOT/hab/py-libhab:$ROOT/client/py-libbionet:$ROOT/data-manager/client/py-libbdm:$ROOT/hab/py-libhab/.libs:$ROOT/client/py-libbionet/.libs:$ROOT/data-manager/client/py-libbdm/.libs
if [ -z "$PYTHONPATH" ]; then
    export PYTHONPATH=$PYPATHADD
else
    export PYTHONPATH=$PYPATHADD:$PYTHONPATH
fi

FILE=$ROOT/hab/test-pattern/patterns/uint32-counter-10
if [ $# -ge 1 ]; then
    FILE=$1
fi

if [ -z "$TEST_DURATION" ]; then
    TEST_DURATION=60
fi

. $ROOT/test/testlib.sh

NUMWATCHERS=10

UNIQUE=$$
RETVAL=0

ORIG_DIR=$PWD

rm -f bdm.db
sqlite3 bdm.db < $ROOT/data-manager/server/schema

BDMID=${HOSTNAME//[.]/-}
#BDMID=$UNIQUE

./highest-perf.py -r "Bionet-Data-Manager.$BDMID.Statistics:Local-Datapoints-Per-Second" &
HIGHPID=$!

WATCHID=0
WATCHERPIDS=""
echo "Starting $NUMWATCHERS bdm-watchers to simulate load"
for i in `jot $NUMWATCHERS`; do
    $ROOT/data-manager/client/bdm-watcher/bdm-watcher --resources="$BDMID,*/test-pattern-hab.$UNIQUE.*:*" > /dev/null 2>&1 &
    #$ROOT/data-manager/client/bdm-watcher/bdm-watcher --resources="$BDMID,*/test-pattern-hab.$UNIQUE.*:*"  &
    PID=$!
    echo " [$PID] ->  bdm-watcher"

    eval WPID$WATCHID=$PID
    WATCHERPIDS="$WATCHERPIDS $PID"
    WATCHID=`expr $WATCHID + 1`
done;

echo "Starting bionet-data-manager"
$ROOT/data-manager/server/bionet-data-manager -x bdm.ini.test -i $BDMID -f bdm.db --bdm-stats 10 --filter="test-pattern-hab.$UNIQUE.*:*" &
BDMPID=$!

echo "Starting test-pattern-hab"
BIP_WRITE_BUFSIZE=1048576 $ROOT/hab/test-pattern/test-pattern-hab -i $UNIQUE --no-node-updates -c -f -m 1000 -l 0 $FILE &
TPHPID=$!

echo "Sleeping..." 
sleep 55

echo "Killing everything"
kill $BDMPID
kill $WATCHERPIDS
kill $TPHPID
wait $TPHPID
wait $BDMPID
wait $HIGHPID
for pid in $WATCHERPIDS; do
    wait $pid
done


exit 0
